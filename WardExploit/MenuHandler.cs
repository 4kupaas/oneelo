using System;
using EloBuddy.SDK.Menu;
using EloBuddy.SDK.Menu.Values;

namespace WardExploit
{
    class MenuHandler
    {
        public static Menu mainMenu;
        public static int sliderValue = 0;

        public static void Initialize()
        {
            mainMenu = MainMenu.AddMenu("Ward Exploit", "Ward Exploit");
            mainMenu.AddLabel("At the beginning of the game, the game will reset your ward upon leaving base");
            mainMenu.AddLabel("Simply recall to repurchase ward or wait until first back");

            CheckBox check = AddCheckbox(ref mainMenu, "Only purchase if off cooldown");
            Slider wardSlider = AddSlider(mainMenu, "Ward Type:", 1, 0, 3);
            wardSlider.OnValueChange += WardSlider_OnValueChange;
            WardSlider_OnValueChange(wardSlider, null);
            sliderValue = wardSlider.CurrentValue;
        }

        public static void AddCheckboxes(ref Menu menu, params string[] checkBoxValues)
        {
            foreach (string s in checkBoxValues)
            {
                if (s.Length > "_false".Length && s.Contains("_false"))
                    AddCheckbox(ref menu, s.Remove(s.IndexOf("_false"), 6), false);
                else
                    AddCheckbox(ref menu, s, true);
            }
        }
        public static Menu AddSubMenu(Menu startingMenu, string text)
        {
            Menu menu = startingMenu.AddSubMenu(text, text + ".");
            menu.AddGroupLabel(text + " Settings");
            return menu;
        }
        public static CheckBox AddCheckbox(ref Menu menu, string text, bool defaultValue = true)
        {
            return menu.Add(menu.UniqueMenuId + text, new CheckBox(text, defaultValue));
        }
        public static CheckBox GetCheckbox(Menu menu, string text)
        {
            return menu.Get<CheckBox>(menu.UniqueMenuId + text);
        }
        public static bool GetCheckboxValue(Menu menu, string text)
        {
            CheckBox checkbox = GetCheckbox(menu, text);

            if (checkbox == null)
                Console.WriteLine("Checkbox (" + text + ") not found under menu (" + menu.DisplayName + "). Unique ID (" + menu.UniqueMenuId + text + ")");

            return checkbox.CurrentValue;
        }
        public static ComboBox AddComboBox(Menu menu, string text, int defaultValue = 0, params string[] values)
        {
            return menu.Add(menu.UniqueMenuId + text, new ComboBox(text, defaultValue, values));
        }
        public static ComboBox GetComboBox(Menu menu, string text)
        {
            return menu.Get<ComboBox>(menu.UniqueMenuId + text);
        }
        public static string GetComboBoxText(Menu menu, string text)
        {
            return menu.Get<ComboBox>(menu.UniqueMenuId + text).SelectedText;
        }
        public static Slider GetSlider(Menu menu, string text)
        {
            return menu.Get<Slider>(menu.UniqueMenuId + text);
        }
        public static int GetSliderValue(Menu menu, string text)
        {
            return menu.Get<Slider>(menu.UniqueMenuId + text).CurrentValue;
        }
        public static Slider AddSlider(Menu menu, string text, int defaultValue, int minimumValue, int maximumValue)
        {
            return menu.Add(menu.UniqueMenuId + text, new Slider(text, defaultValue, minimumValue, maximumValue));
        }

        // Ward Slider display
        public static void WardSlider_OnValueChange(ValueBase<int> sender, ValueBase<int>.ValueChangeArgs args)
        {
            int value = 0;
            if (args != null)
                value = args.NewValue;
            else
                value = sender.CurrentValue;

            if (value == 0)
            {
                sender.DisplayName = "Ward Type: Warding Totem";
                sliderValue = value;
            }
            else if (value == 1)
            {
                sender.DisplayName = "Ward Type: Sweeping Lens";
                sliderValue = value;
            }
            else if (value == 2)
            {
                sender.DisplayName = "Ward Type: Farsight Trinket";
                sliderValue = value;
            }
            else if (value == 3)
            {
                sender.DisplayName = "Ward Type: Oracles Lens";
                sliderValue = value;
            }
        }
    }
}